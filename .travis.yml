version: ~> 1.0
os: linux
dist: xenial
language: cpp

# untagged master branch commits (and PRs to master) are built and tested
# x.y.z version tags on master, e.g "1.3.24" create a new github binary release & pypi python wheel release
# "latest" tag on master updates github "latest" binary release, overwriting any existing files (no pypi release)
branches:
  only:
    - master
    - latest
    - /[0-9]+\.[0-9]+\.[0-9]+/

env:
  global:
    # python wheel building can (and should) be disabled to speed up CI when working on a PR
    - BUILD_PYTHON_WHEELS=false
    - MSYS_URL='https://github.com/msys2/msys2-installer/releases/download/2020-09-03/msys2-base-x86_64-20200903.sfx.exe'
    - CIBUILDWHEEL_VERSION=1.6.1
    # pypi TWINE_PASSWORD
    - secure: GFBxgbwP75qb0QW3jFO3e3fbfFLpYue+kUZGm3ArNZ9ExeXPGU3fxfxiBolEPnnPK98VlZZ8R0WBQptvWnaBN0tamt5r7OCXljQdpNgRF04MMa1gtbAEnuYjd6dHQ5CbdiEKxK4MnF28jJ+0wnw35E7YPGq357XWKwGFoG0HT9UenFd7HRbzsM0WmO7sog8bZYahYU+nyIDu6AVGlsc1b4XpVEu/pcuY2PexzYpV4wv+qVprRIeTwi2aFb4bmr3XcPZtyps3eiExLISHmz3mAuHIiNEt3wQA7Kjzsz93lm6DlGi3LSEXugfomGzg3oyHQC8oKKky/D6hHqnc9Jfow4Epj3aHvE4LP00TxDiyrjqvVGeCHa/RL/WIGJ/zZA4W7QTr2wvDOhw5EOuSmIW42tmOsOV4Zo/wr5d9A0r0VUfHhrsi1QUHmFFgTJXeTDyHYC32mvXy8EuaxLRFLBUVKE3gPfaYUgRafvx1Kn7H9WUmrpA7JAj2caMYD6UtKly1J6BFyTpPFlGgk3yxzVYgbeToOOrabQzGzYBuaxz6aysbyPra+rYF5SrJ/Dp4TPjfoE/1IIjmrbVpYEQGdfojnxxN6xnW7woPgq8IUDStw7iR83xyluWEtn1i1KlzRA8NMNdBHxgFWQ9rpE/DZikeJ8yb0FoEleMRjaE6G4C33rc=

jobs:
  include:
    #########################################################################
    # linux code quality build: cmake / clang 10 -> sonarcloud.io, codecov.io
    #########################################################################
    - name: "static analysis / code coverage"
      if: tag != "latest"
      dist: xenial
      language: cpp
      compiler: clang
      env:
        - STATIC_LIBS_OS="linux"
        - SUDOCMD='sudo'
        # SONAR_LOGIN
        - secure: Muu56AqHMCZOpCG2d5Byeh6P++9xXKl7otulxdhZCfA1/yTAJM9M67B1ZHo7czEvLKdoVzqCz6aFMnsVvFHUHQDmAtmth/WzdfXZ7OTG7puDIeWRmYqQacpLeF6h9ws3sUr5Bjz9m0guhjbKN/6VIqoyuWLH/J0MwzJN5JKgWitQBeJ15GWjNJN20FLgiYW0vWtQ71dncM6VaLAyH6V/T8jLRNacmCjApAOsS2FuhnSfbL+rY5nRVXPtoy/muwRgpl2Bez8OV6z5nDCaBLxXLgNkC7Y/0OhfzY/t+6wZ4nuDZDJ/4Hn4AyycH1O1ldmfEjw9nHBdqG/0JW2NmvSLojp5NiCUSI1MDmcgqKv6VKdVV2cdn6b7s6YY/8p08pnm+uExHYRkiXPFNeYfoQF3ruYSzFOQXRA+VI3Rg0dMfs4cO+PXCWS/hIAHudG3vaDgOwOnLFaOPjJKGYidmbmu6u4jdvBNFuCkooSYmnO2JCe0LIGgJAwlOEfG51WYD9bewCx+w+NmB+Cow3E4G0DCHomz1XGUhp1DsmjGarU1kDf4PtFLQgLC88h7AQfJtg15mSV6xDcKV+nmuDNS+ifTpQTTSe/w6LqqzcE/EOLaVAtCSe4ACOORW2yBF7DPgUY47ZSkU4iwA7pAOAYDKs37fNHjK8s/TJhM++RZ+21oMME=
      cache:
        ccache: true
        directories:
          - $HOME/sonarcache
        timeout: 3
      addons:
        apt:
          sources:
            # latest cmake
            - sourceline: 'deb https://apt.kitware.com/ubuntu/ xenial main'
              key_url: 'https://apt.kitware.com/keys/kitware-archive-latest.asc'
            # clang-10
            - sourceline: 'deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-10 main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
            # gcc-9
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
          packages:
            - cmake
            - clang-10
            - lcov
            - lld-10
            - llvm-10
            - libstdc++-9-dev # need to update libstdc++ to get c++17 features
            - libxkbcommon-dev
            - mesa-common-dev
            - libglu1-mesa-dev
            - jwm
            - libfontconfig1-dev
            - libfreetype6-dev
            - libx11-dev
            - libx11-xcb-dev
            - libxext-dev
            - libxfixes-dev
            - libxi-dev
            - libxrender-dev
            - libxcb1-dev
            - libxcb-glx0-dev
            - libxcb-keysyms1-dev
            - libxcb-image0-dev
            - libxcb-shm0-dev
            - libxcb-icccm4-dev
            - libxcb-sync-dev
            - libxcb-xfixes0-dev
            - libxcb-shape0-dev
            - libxcb-randr0-dev
            - libxcb-render-util0-dev
            - libxkbcommon-dev
            - libxkbcommon-x11-dev
            - libxcb-xinerama0-dev
        sonarcloud:
          organization: "lkeegan-github"
      services: xvfb
      git:
        depth: false
      install:
        - eval "CC=clang-10 && CXX=clang++-10 && COV=llvm-cov-10"
        - /usr/bin/cmake --version
        - $CC --version
        - $CXX --version
        - $COV --version
        # start a window manager so the Qt GUI tests can have their focus set
        - "jwm &"
        - sleep 1
      script:
        # build tests & compile executable using sonar-source build wrapper
        - ccache --zero-stats
        - mkdir build
        - cd build
        - /usr/bin/cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_PREFIX_PATH="/usr/local/qt5-static;/opt/libs;/opt/libs/lib/cmake;/opt/libs/dune" -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_EXE_LINKER_FLAGS=-fuse-ld=lld -DPYTHON_EXECUTABLE=/usr/bin/python3 -DSME_WITH_TBB=ON
        - build-wrapper-linux-x86-64 --out-dir bw-output make -j2
        - ccache --show-stats
        # run tests
        # make list of "leaks" from system libraries that LeakSanitizer should ignore
        - echo "leak:libfontconfig.so" > suppr.txt
        - echo "leak:libX11.so" >> suppr.txt
        # generate gcov test coverage data for codecov.io
        - mkdir gcov
        # core unit core_tests
        - lcov -q -z -d .
        - LSAN_OPTIONS=suppressions=suppr.txt:exitcode=0 ./test/tests -as "[core]" > core.txt 2>&1
        - tail -n 100 core.txt
        - $COV gcov -p src/core/CMakeFiles/core.dir/*/src/*.gcno > /dev/null
        - $COV gcov -p test/CMakeFiles/tests.dir/__/src/core/*/src/*.gcno > /dev/null
        - mv *#src#core*.gcov gcov/
        - rm -f *.gcov
        # upload coverage report to codecov.io
        - bash <(curl --connect-timeout 10 --retry 5 -s https://codecov.io/bash) -X gcov -F core

        # gui unit tests
        - rm -f gcov/*
        - lcov -q -z -d .
        - LSAN_OPTIONS=suppressions=suppr.txt:exitcode=0 ./test/tests -as "~[mainwindow][gui]" > gui.txt 2>&1
        - tail -n 100 gui.txt
        - $COV gcov -p src/core/CMakeFiles/core.dir/*/src/*.gcno > /dev/null
        - $COV gcov -p test/CMakeFiles/tests.dir/__/src/core/*/src/*.gcno > /dev/null
        - $COV gcov -p src/gui/CMakeFiles/gui.dir/*.gcno > /dev/null
        - $COV gcov -p src/gui/CMakeFiles/gui.dir/*/*.gcno > /dev/null
        - mv *#src#core*.gcov *#src#gui*.gcov gcov/
        - rm -f *.gcov
        # upload coverage report to codecov.io
        - bash <(curl --connect-timeout 10 --retry 5 -s https://codecov.io/bash) -X gcov -F gui

        # mainwindow unit tests
        - rm -f gcov/*
        - lcov -q -z -d .
        - LSAN_OPTIONS=suppressions=suppr.txt:exitcode=0 ./test/tests -as "[mainwindow][gui]" > gui-mainwindow.txt 2>&1
        - tail -n 100 gui-mainwindow.txt
        - $COV gcov -p src/core/CMakeFiles/core.dir/*/src/*.gcno > /dev/null
        - $COV gcov -p test/CMakeFiles/tests.dir/__/src/core/*/src/*.gcno > /dev/null
        - $COV gcov -p src/gui/CMakeFiles/gui.dir/*.gcno > /dev/null
        - $COV gcov -p src/gui/CMakeFiles/gui.dir/*/*.gcno > /dev/null
        - mv *#src#core*.gcov *#src#gui*.gcov gcov/
        - rm -f *.gcov
        # upload coverage report to codecov.io
        - bash <(curl --connect-timeout 10 --retry 5 -s https://codecov.io/bash) -X gcov -F mainwindow

        # cli unit tests
        - rm -f gcov/*
        - lcov -q -z -d .
        - LSAN_OPTIONS=suppressions=suppr.txt:exitcode=0 ./test/tests -as "[cli]" > cli.txt 2>&1
        - tail -n 100 cli.txt
        - $COV gcov -p src/core/CMakeFiles/core.dir/*/src/*.gcno > /dev/null
        - $COV gcov -p cli/CMakeFiles/cli.dir/src/*.gcno > /dev/null
        - $COV gcov -p test/CMakeFiles/tests.dir/__/src/core/*/src/*.gcno > /dev/null
        - $COV gcov -p test/CMakeFiles/tests.dir/__/cli/src/*.gcno > /dev/null
        - mv *#src#core*.gcov *#cli*.gcov gcov/
        - rm -f *.gcov
        # upload coverage report to codecov.io
        - bash <(curl --connect-timeout 10 --retry 5 -s https://codecov.io/bash) -X gcov -F cli

        # python tests
        - rm -f gcov/*
        - lcov -q -z -d .
        - cd sme
        - LSAN_OPTIONS=exitcode=0 LD_PRELOAD=$($CC -print-file-name=libclang_rt.asan-x86_64.so) python3 -m unittest discover -v -s ../../test > sme.txt 2>&1
        - tail -n 100 sme.txt
        - cd ..
        - $COV gcov -p src/core/CMakeFiles/core.dir/*/src/*.gcno > /dev/null
        - $COV gcov -p sme/CMakeFiles/sme.dir/*.gcno > /dev/null
        - mv *#src#core*.gcov *#sme*.gcov gcov/
        - rm -f *.gcov
        # upload coverage report to codecov.io
        - bash <(curl --connect-timeout 10 --retry 5 -s https://codecov.io/bash) -X gcov -F sme

        # run all c++ tests again, then gcov again to get full coverage for sonarsource
        - rm -f gcov/*
        - lcov -q -z -d .
        - LSAN_OPTIONS=suppressions=suppr.txt:exitcode=0 ./test/tests -as > tests.txt 2>&1
        - tail -n 100 tests.txt
        - $COV gcov -p src/core/CMakeFiles/core.dir/*/src/*.gcno > /dev/null
        - $COV gcov -p test/CMakeFiles/tests.dir/__/src/core/*/src/*.gcno > /dev/null
        - $COV gcov -p src/gui/CMakeFiles/gui.dir/*.gcno > /dev/null
        - $COV gcov -p src/gui/CMakeFiles/gui.dir/*/*.gcno > /dev/null
        - $COV gcov -p cli/CMakeFiles/cli.dir/src/*.gcno > /dev/null
        - $COV gcov -p test/CMakeFiles/tests.dir/__/cli/src/*.gcno > /dev/null
        - mv *#src#core*.gcov *#src#gui*.gcov *#cli*.gcov gcov/
        - rm -f *.gcov
        # also run python tests, but only copy gcov data for sme files: don't want to overwrite coverage info on core from c++ tests
        - lcov -q -z -d .
        - cd sme
        - LSAN_OPTIONS=exitcode=0 LD_PRELOAD=$($CC -print-file-name=libclang_rt.asan-x86_64.so) python3 -m unittest discover -s ../../test > sme.txt 2>&1
        - tail -n 100 sme.txt
        - cd ..
        - $COV gcov -p sme/CMakeFiles/sme.dir/*.gcno > /dev/null
        - mv *#sme*.gcov gcov/
        - rm -f *.gcov

        - cd ..
        # upload to sonar-scanner
        - sonar-scanner -Dsonar.login=$SONAR_LOGIN
    ######################################################
    # linux GUI/CLI release build: gcc 9 on ubuntu 16.04 #
    ######################################################
    - name: "linux GUI/CLI"
      dist: xenial
      language: cpp
      compiler: gcc
      env:
        - DEPLOY_FILE_GUI="spatial-model-editor"
        - DEPLOY_FILE_CLI="spatial-cli"
        - STATIC_LIBS_OS="linux"
        - SUDOCMD='sudo'
      cache:
        ccache: true
      addons:
        apt:
          sources:
            # latest cmake
            - sourceline: 'deb https://apt.kitware.com/ubuntu/ xenial main'
              key_url: 'https://apt.kitware.com/keys/kitware-archive-latest.asc'
            # gcc-9
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
          packages:
            - cmake
            - g++-9
            - jwm
            - python3-pip
            - libfontconfig1-dev
            - libfreetype6-dev
            - libx11-dev
            - libx11-xcb-dev
            - libxext-dev
            - libxfixes-dev
            - libxi-dev
            - libxrender-dev
            - libxcb1-dev
            - libxcb-glx0-dev
            - libxcb-keysyms1-dev
            - libxcb-image0-dev
            - libxcb-shm0-dev
            - libxcb-icccm4-dev
            - libxcb-sync-dev
            - libxcb-xfixes0-dev
            - libxcb-shape0-dev
            - libxcb-randr0-dev
            - libxcb-render-util0-dev
            - libxkbcommon-dev
            - libxkbcommon-x11-dev
            - libxcb-xinerama0-dev
      services: xvfb
      install:
        - sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 100
        - sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 100
        - gcc --version
        - g++ --version
        # start a window manager so the Qt GUI tests can have their focus set
        - "jwm &"
        - sleep 1
        - which python3
        - whereis python3
        - python3-config --includes
        - python3 -m pip install nose
      script:
        - export SME_EXTRA_EXE_LIBS="-static-libgcc;-static-libstdc++"
        - mkdir build
        - cd build
        - /usr/bin/cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH="/opt/libs;/opt/libs/lib/cmake;/opt/libs/dune" -DPYTHON_EXECUTABLE=/usr/bin/python3 -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DSME_EXTRA_EXE_LIBS=$SME_EXTRA_EXE_LIBS -DSME_WITH_TBB=ON
        - ccache --zero-stats
        - make -j2 VERBOSE=1
        - ccache --show-stats
        # run c++ tests
        - ./test/tests -as > tests.txt 2>&1
        - tail -n 100 tests.txt
        # run python tests
        - cd sme
        - python3 -m nose ../.. -v
        - cd ..
        # run benchmarks (~1 sec per benchmark, ~20secs total)
        - time ./benchmark/benchmark 1
        # check dependencies of resulting executables
        - cd src
        - cp ../cli/spatial-cli .
        - ldd spatial-model-editor
        - ldd spatial-cli
    ########################################################
    # macOS GUI/CLI release build: xcode 11.3, macOS 10.14 #
    ########################################################
    - name: "macOS GUI/CLI"
      os: osx
      osx_image: xcode11.3
      language: cpp
      compiler: clang
      env:
        - STATIC_LIBS_OS="osx"
        - DEPLOY_FILE_GUI="spatial-model-editor.dmg"
        - DEPLOY_FILE_CLI="spatial-cli.dmg"
        - SUDOCMD='sudo'
      addons:
        homebrew:
          packages:
            - ccache
      cache:
        ccache: true
      install:
        - python3 -m pip install --user nose
      script:
        - mkdir build
        - cd build
        - cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH="/opt/libs;/opt/libs/lib/cmake;/opt/libs/dune" -DPYTHON_EXECUTABLE=/usr/local/bin/python3 -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DSME_WITH_TBB=ON -DSME_DUNE_COPASI_USE_FALLBACK_FILESYSTEM=ON
        - ccache --zero-stats
        - make -j2 VERBOSE=1
        - ccache --show-stats
        # run non-gui c++ tests
        - ./test/tests -as "~[gui]" > tests.txt 2>&1
        - tail -n 100 tests.txt
        # run python tests
        - cd sme
        - python3 -m nose ../.. -v
        - cd ..
        # run benchmarks (~1 sec per benchmark, ~20secs total)
        - time ./benchmark/benchmark 1
        # check dependencies of resulting executables
        - otool -L src/spatial-model-editor
        - otool -L cli/spatial-cli

        # for now just distribute dmg of executables:
        - mkdir spatial-model-editor
        - cp src/spatial-model-editor spatial-model-editor/.
        - hdiutil create spatial-model-editor -fs HFS+ -srcfolder spatial-model-editor
        - mkdir spatial-cli
        - cp cli/spatial-cli spatial-cli/.
        - hdiutil create spatial-cli -fs HFS+ -srcfolder spatial-cli
    ##########################################################
    # windows 64-bit GUI/CLI release build: mingw-w64 gcc 10 #
    ##########################################################
    - name: "windows GUI/CLI (64-bit)"
      os: windows
      env:
        - STATIC_LIBS_OS="win64"
        - DEPLOY_FILE_GUI="spatial-model-editor.exe"
        - DEPLOY_FILE_CLI="spatial-cli.exe"
        - SUDOCMD=''
      cache:
        directories:
          - $HOME/.ccache
      install:
        # https://www.msys2.org/docs/ci/
        - wget $MSYS_URL -O msys2.exe
        - ./msys2.exe -y -oC:\\
        - export MSYS_SHELL='cmd //C RefreshEnv.cmd & set MSYS=winsymlinks:nativestrict & C:\\msys64\\msys2_shell.cmd -defterm -no-start -here -msys -l'
        - $MSYS_SHELL -c ' '
        - $MSYS_SHELL -c 'pacman --noconfirm -Syuu'
        - $MSYS_SHELL -c 'pacman --noconfirm -Syuu'
        - $MSYS_SHELL -c "pacman --noconfirm -Syuu mingw-w64-x86_64-gcc mingw-w64-x86_64-cmake mingw-w64-x86_64-ccache make"
        - export BUILD_SHELL='cmd //C RefreshEnv.cmd & set MSYS=winsymlinks:nativestrict & C:\\msys64\\msys2_shell.cmd -defterm -no-start -here -mingw64 -l'
        - taskkill //IM gpg-agent.exe //F || echo "task not found" # https://travis-ci.community/t/4967
        - taskkill //IM dirmngr.exe //F || echo "task not found" # similar to above
        - choco install python --version=3.8.2 --force --no-progress -y
      script:
        - $BUILD_SHELL ci/windows-gui.sh
        - ls build/*/*.exe
        - cd build/src
        - cp ../cli/spatial-cli.exe .
        - ls
    ##########################################################################
    # manylinux1 python wheels release build: custom manylinux1 docker image #
    ##########################################################################
    - name: "manylinux1 python wheels"
      if: (env(BUILD_PYTHON_WHEELS) = true) AND (tag != "latest")
      os: linux
      language: python
      python: 3.8
      services:
        - docker
      env:
        - DOCKER_IMAGE=lkeegan/sme_manylinux1_x86_64:2020.09.28
      install:
        - docker pull $DOCKER_IMAGE
      before_script:
        skip
      script:
        - python --version
        - pip --version
        - pip install --upgrade pip
        - pip install --upgrade twine
        - docker run --rm -v `pwd`:/io -u `id -u`:`id -g` $DOCKER_IMAGE bash /io/ci/linux-wheels.sh
        - ls dist
        - export TWINE_USERNAME="__token__"
        - if [ -n "${TRAVIS_TAG}" ]; then python -m twine upload --verbose --non-interactive --skip-existing dist/* ; fi
    ################################################################################
    # manylinux2010 python wheels release build: custom manylinux2010 docker image #
    ################################################################################
    - name: "manylinux2010 python wheels"
      if: (env(BUILD_PYTHON_WHEELS) = true) AND (tag != "latest")
      os: linux
      language: python
      python: 3.8
      services:
        - docker
      env:
        - DOCKER_IMAGE=lkeegan/sme_manylinux2010_x86_64:2020.09.28
      install:
        - docker pull $DOCKER_IMAGE
      before_script:
        skip
      script:
        - python --version
        - pip --version
        - pip install --upgrade pip
        - pip install --upgrade twine
        - docker run --rm -v `pwd`:/io -u `id -u`:`id -g` $DOCKER_IMAGE bash /io/ci/linux-wheels.sh
        - ls dist
        - export TWINE_USERNAME="__token__"
        - if [ -n "${TRAVIS_TAG}" ]; then python -m twine upload --verbose --non-interactive --skip-existing dist/* ; fi
    ##############################################################
    # macOS python wheels release build: xcode 11.3, macOS 10.14 #
    ##############################################################
    - name: "macOS python wheels"
      if: (env(BUILD_PYTHON_WHEELS) = true) AND (tag != "latest")
      os: osx
      osx_image: xcode11.3
      language: cpp
      compiler: clang
      addons:
        homebrew:
          packages:
            - ccache
      env:
        - STATIC_LIBS_OS="osx"
        - SUDOCMD='sudo'
        # c++17 requirements means we can only create osx10_14 wheels
        - MACOSX_DEPLOYMENT_TARGET=10.14
        # python 2.7 headers not compatible with c++17: use of 'register' causes clang compile error
        - CIBW_SKIP=cp27-macosx_x86_64
        - CIBW_TEST_COMMAND="python -m unittest discover -v -s {project}/test"
        - CIBW_BUILD_VERBOSITY=3
        - CCACHE_BASEDIR=/private
      install:
        - python3 -m pip install cibuildwheel==$CIBUILDWHEEL_VERSION
      script:
        - ccache -s
        - export CMAKE_CXX_COMPILER_LAUNCHER="ccache"
        - export SME_DUNE_COPASI_USE_FALLBACK_FILESYSTEM="on"
        - export CMAKE_PREFIX_PATH="/opt/libs;/opt/libs/lib/cmake;/opt/libs/dune"
        - python3 -m cibuildwheel --output-dir dist
        - ccache -s
        - ls dist
        - export TWINE_USERNAME="__token__"
        - python3 -m pip install twine
        - if [ -n "${TRAVIS_TAG}" ]; then python3 -m twine upload --verbose --non-interactive --skip-existing dist/* ; fi
    #####################################################################
    # windows 32-bit python wheels release build: mingw-w64-i686-gcc 10 #
    #####################################################################
    - name: "windows 32-bit python wheels"
      if: (env(BUILD_PYTHON_WHEELS) = true) AND (tag != "latest")
      os: windows
      env:
        - STATIC_LIBS_OS="win32"
        - SUDOCMD=''
      cache:
        directories:
          - $HOME/.ccache
      install:
        # https://www.msys2.org/docs/ci/
        - wget $MSYS_URL -O msys2.exe
        - ./msys2.exe -y -oC:\\
        - export MSYS_SHELL='cmd //C RefreshEnv.cmd & set MSYS=winsymlinks:nativestrict & C:\\msys64\\msys2_shell.cmd -defterm -no-start -here -msys -lc'
        - $MSYS_SHELL ' '
        - $MSYS_SHELL 'pacman --noconfirm -Syuu'
        - $MSYS_SHELL 'pacman --noconfirm -Syuu'
        - $MSYS_SHELL "pacman --noconfirm -Syuu mingw-w64-i686-gcc mingw-w64-i686-cmake mingw-w64-i686-ccache make"
        - export BUILD_SHELL='cmd //C RefreshEnv.cmd & set MSYS=winsymlinks:nativestrict & C:\\msys64\\msys2_shell.cmd -defterm -no-start -here -mingw32 -l'
        - taskkill //IM gpg-agent.exe //F || echo "task not found" # https://travis-ci.community/t/4967
        - taskkill //IM dirmngr.exe //F || echo "task not found" # similar to above
        - choco install python --version=3.8.2 --force --no-progress -y
        - /c/Python38/python.exe -m pip install cibuildwheel==$CIBUILDWHEEL_VERSION
        - echo 'CIBW_BUILD="*-win32"' > source.sh
      script:
        - $BUILD_SHELL ci/windows-wheels.sh
        - ls dist
        - export TWINE_USERNAME="__token__"
        - /c/Python38/python.exe -m pip install --upgrade twine
        - if [ -n "${TRAVIS_TAG}" ]; then /c/Python38/python.exe -m twine upload --verbose --non-interactive --skip-existing dist/* ; fi
    #######################################################################
    # windows 64-bit python wheels release build: mingw-w64-x86_64-gcc 10 #
    #######################################################################
    - name: "windows 64-bit python wheels"
      if: (env(BUILD_PYTHON_WHEELS) = true) AND (tag != "latest")
      os: windows
      env:
        - STATIC_LIBS_OS="win64"
        - SUDOCMD=''
      cache:
        directories:
          - $HOME/.ccache
      install:
        - wget $MSYS_URL -O msys2.exe
        - ./msys2.exe -y -oC:\\
        - export MSYS_SHELL='cmd //C RefreshEnv.cmd & set MSYS=winsymlinks:nativestrict & C:\\msys64\\msys2_shell.cmd -defterm -no-start -here -msys -l'
        - $MSYS_SHELL -c ' '
        - $MSYS_SHELL -c 'pacman --noconfirm -Syuu'
        - $MSYS_SHELL -c 'pacman --noconfirm -Syuu'
        - $MSYS_SHELL -c "pacman --noconfirm -Syuu mingw-w64-x86_64-gcc mingw-w64-x86_64-cmake mingw-w64-x86_64-ccache make"
        - export BUILD_SHELL='cmd //C RefreshEnv.cmd & set MSYS=winsymlinks:nativestrict & C:\\msys64\\msys2_shell.cmd -defterm -no-start -here -mingw64 -l'
        - taskkill //IM gpg-agent.exe //F || echo "task not found" # https://travis-ci.community/t/4967
        - taskkill //IM dirmngr.exe //F || echo "task not found" # similar to above
        - choco install python --version=3.8.2 --force --no-progress -y
        - export PATH=/c/Python38:/c/Python38/Scripts:$PATH
        - which python
        - python --version
        - python -m pip install --upgrade pip
        - python -m pip install cibuildwheel==$CIBUILDWHEEL_VERSION
        - echo 'CIBW_BUILD="*-win_amd64"' > source.sh
      script:
        - $BUILD_SHELL ci/windows-wheels.sh
        - ls dist
        - export TWINE_USERNAME="__token__"
        - python -m pip install --upgrade twine
        - python -m pip install dist/sme-*-cp38-cp38-win_amd64.whl
        - python -m unittest discover -v
        - if [ -n "${TRAVIS_TAG}" ]; then /c/Python38/python.exe -m twine upload --verbose --non-interactive --skip-existing dist/* ; fi

before_script:
  # download pre-compiled Qt5 static libraries
  - wget "https://github.com/lkeegan/qt5-static/releases/latest/download/qt5-static-$STATIC_LIBS_OS.tgz"
  - $SUDOCMD tar xf qt5-static-$STATIC_LIBS_OS.tgz -C /
  # download pre-compiled libSBML (and other) static libraries
  - wget "https://github.com/lkeegan/libsbml-static/releases/latest/download/libsbml-static-$STATIC_LIBS_OS.tgz"
  - $SUDOCMD tar xf libsbml-static-$STATIC_LIBS_OS.tgz -C /
  # download pre-compiled dunecopasi static libraries
  - wget "https://github.com/lkeegan/dune-copasi-static/releases/latest/download/dune-copasi-static-$STATIC_LIBS_OS.tgz"
  - $SUDOCMD tar xf dune-copasi-static-$STATIC_LIBS_OS.tgz -C /

notifications:
  email: false

deploy:
  # if build is tagged and DEPLOY_FILE_GUI var is set, upload executables to github release
  provider: releases
  token:
    secure: E0WtptZea2n40eN+FBYZ2XYv/pjKUjVFZavl8BTVYhidzXYuT/DvhoehPVauJRy/t5QLMtmyd5ww9dhYkIcNcpAc1INrUlYG274D8xgXwbgsftmFbMqdrKR9f/qkynP0r6LCd1p0Tuhxxf37OcTYVEOjbvV+KsTzpWHtS9AqZGvMfv/rpI4r/Zu/LfGBs2T7Rr8Mlfy5YBI2L7lGka3ziTIic01pKDfjHJQ2xD2N366mEqcpB0vjF8c9b+qIUbQ8g8ybLoMfKM6ZSvcpz2NmLQK8l8gzzTN/k1PI2DJxmzi+9G031RXLAXvbR8I8NEQlZfsicepHk0m13EI7x5/TIGaa2ngSgX1W7oAL0IAkJFpcWcN5RQOgowCBAB/UnHCX8EgnBAiD8eTlc4DUC2WY84Dr3EcdhLg0bEX/Ky4mDAxt0QgABG0hEU3kE6USsUvp7IZmnCEdu8e+F/HRmvSUqECI9FvjmpHdBHwIv6anVA2pndN/ZGn4+4BWbo6IwycAh0FPAnvvs6guxnOqQW/eMRgBI3y4grzEYP/bPzlL1W6q42r6fwvh45LtcgC+joAoJCL3I51QcZ1joMY/OShSaKi3MnokImmb/GPRvebe3hDGGSsEAarrmIRb0zCMYDMdHzA+pqeojGZf6SCfIculmeE1MO2t/DqumxQRxTGx+8k=
  file:
    - $DEPLOY_FILE_GUI
    - $DEPLOY_FILE_CLI
  cleanup: false
  overwrite: true
  edge: true
  on:
    repo: lkeegan/spatial-model-editor
    tags: true
    all_branches: true
    condition: $DEPLOY_FILE_GUI != ""
